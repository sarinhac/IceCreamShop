@model IceCreamSystem.Models.Worker

@{
    ViewBag.Title = "Edit";
}

<div class="container">
    <div class="col-xs-12 col-sm-8 col-md-7 col-lg-7">

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.IdWorker)

                <div class="form-group">
                    @Html.LabelFor(model => model.NameWorker, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-12">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="fas fa-user"></i></span>
                            </div>
                            @Html.EditorFor(model => model.NameWorker, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.NameWorker, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="input-group">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Birth, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-12">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="far fa-calendar-alt"></i></span>
                                </div>
                                @Html.EditorFor(model => model.Birth, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Birth, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Admission, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-12">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="far fa-calendar-alt"></i></span>
                                </div>
                                @Html.EditorFor(model => model.Admission, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Admission, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Address.Cep, "CEP", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="fas fa-house-user"></i></span>
                            </div>
                            @Html.EditorFor(model => model.Address.Cep, new { htmlAttributes = new { @class = "form-control" } })
                            <div class="input-group-append">
                                <button class="btn btn-outline-info" id="btnCep" type="button">Search</button>
                            </div>
                            @Html.ValidationMessageFor(model => model.Address.Cep, "", new { @class = "text-danger col-md-12", @id = "erromsg" })
                        </div>
                    </div>
                </div>

                <div class="input-group">

                    <div class="form-group col-md-9" id="address">
                        @Html.LabelFor(model => model.Address.Street, "Address", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-12">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fas fa-house-user"></i></span>
                                </div>
                                @Html.EditorFor(model => model.Address.Street, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Address.Street, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group col-md-3" id="number">
                        @Html.LabelFor(model => model.Address.Number, "Number", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-12">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fas fa-house-user"></i></span>
                                </div>
                                @Html.EditorFor(model => model.Address.Number, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Address.Number, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group" id="moreInformation">
                    @Html.LabelFor(model => model.Address.Complement, "More information about your Address", htmlAttributes: new { @class = "control-label col-md-12" })
                    <div class="col-md-12">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="fas fa-house-user"></i></span>
                            </div>
                            @Html.EditorFor(model => model.Address.Complement, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Address.Complement, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>


                <div class="input-group">
                    <div class="form-group col-md-5" id="neighborhood">
                        @Html.LabelFor(model => model.Address.Neighborhood, "Neighborhood", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-12">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fas fa-house-user"></i></span>
                                </div>
                                @Html.EditorFor(model => model.Address.Neighborhood, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Address.Neighborhood, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group col-md-4" id="city">
                        @Html.LabelFor(model => model.Address.City, "City", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-12">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fas fa-house-user"></i></span>
                                </div>
                                @Html.EditorFor(model => model.Address.City, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Address.City, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group col-md-3" id="estate">
                        @Html.LabelFor(model => model.Address.Uf, "Estate", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-12">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fas fa-house-user"></i></span>
                                </div>
                                @Html.EditorFor(model => model.Address.Uf, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Address.Uf, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CompanyId, "Company", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="fas fa-building"></i></span>
                            </div>
                            @Html.DropDownList("CompanyId", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.CompanyId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="input-group">

                    <div class="form-group col-md-4">
                        @Html.LabelFor(model => model.Salary, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-12">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fas fa-coins"></i></span>
                                </div>
                                @Html.EditorFor(model => model.Salary, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Salary, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group col-md-5">
                        @Html.LabelFor(model => model.OfficeId, "Office", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-12">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text"><i class="fas fa-briefcase"></i></span>
                                </div>
                                @Html.DropDownList("OfficeId", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.OfficeId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group col-md-3">
                        @Html.LabelFor(model => model.HaveLogin, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-12">
                            <div class="checkbox" data-val="false" value="false">
                                @Html.EditorFor(model => model.HaveLogin, "", new { @value = "false" })
                                @Html.ValidationMessageFor(model => model.HaveLogin, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group" id="permission">
                    @Html.LabelFor(model => model.Permission, "Permission", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-8">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="fas fa-key"></i></span>
                            </div>
                            @Html.DropDownList("Permission", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Permission, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        @Html.ActionLink("Cancelar", "Index", null, new { @class = "btn btn-secondary btn-lg" })
                        <input type="submit" value="Save" class="btn btn-warning" />
                    </div>
                </div>
            </div>
        }
    </div>
</div>
@section Scripts {

    <script type="text/javascript">

        $('#HaveLogin').change(function () {
            if (this.checked) {
                $('#permission').show();
            }
            else {
                $('#permission').hide();
            }
        });
    </script>

    <script type="text/javascript">

        $("#btnCep").on("click", function () {
            $.ajax({
                url: 'https://viacep.com.br/ws/' + $("#Address_Cep").val() + '/json/unicode/',
                dataType: 'json',
                success: function (resposta) {

                    if (resposta.Street == null) {
                        $("#erromsg").text("CEP Invalido ou Inexistente, Preencha um CEP válido ou digite o endereço manualmente");
                        return;
                    }

                    $("#erromsg").text("");
                    $("#Address_Street").val(resposta.Street);
                    $("#Address_Complement").val(resposta.Complement);
                    $("#Address_Neighborhood").val(resposta.Neighborhood);
                    $("#Address_City").val(resposta.localidade);
                    $("#Address_Uf").val(resposta.uf);
                    $("#Address_Number").focus();

                },
                error: function () {

                    $("#erromsg").text("CEP Inválido ou Inexistente, Preencha um CEP válido ou digite o endereço manualmente");
                    return;
                }
            });
        });
    </script>
}